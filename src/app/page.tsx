"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/o8c38ioXUuz
 */

//Background: #1F2937
// Main: #008087
// Secondary: #8BD77E
// Accent: #25AE8D
// Alert: #F9F871
import Link from "next/link";
import Image from "next/image";
import React, { Suspense, useEffect } from "react";
import SimulatorComponent from "@Component/simulator/";
import { RotatingLines } from "react-loader-spinner";
import LoadingComponent from "@Component/simulator/LoadingComponent";
import { PostHog } from "posthog-node";

const client = new PostHog("phc_elCTv5oRjRWmQWI3WAemyrjBKU5wiDVONqFq8ZlgGlq", {
  host: "https://us.posthog.com",
});

function MainMenuSkeleton() {
  return (
    <>
      <Link className="flex items-center justify-center" href="#">
        <Image height={40} width={40} src="logo.svg" alt="logo" />
        <span className="ml-2 text-xl font-bold">Dark Almanac</span>
      </Link>
      <nav className="ml-auto flex gap-4 sm:gap-6">
        <Link
          className="text-sm font-medium hover:underline underline-offset-4 min-width-4"
          href="#"
        ></Link>
        <Link
          className="text-sm font-medium hover:underline underline-offset-4 min-width-4"
          href="#"
        >
          Articles
        </Link>
        <Link
          className="text-sm font-medium hover:underline underline-offset-4"
          href="/login"
        >
          Login
        </Link>
      </nav>
    </>
  );
}

async function MainMenu() {
  useEffect(() => {
    // Send queued events immediately. Use for example in a serverless environment
    // where the program may terminate before everything is sent
    // client.capture({
    //   distinctId: "test-id",
    //   event: "pageRequest",
    // });

    client.flush();
    client.capture({
      distinctId: "test-id",
      event: "test-event",
    });

    // Send queued events immediately. Use for example in a serverless environment
    // where the program may terminate before everything is sent
    client.flush();
    console.log("I FIRED!");
  }, []);
  return (
    <>
      <Link className="flex items-center justify-center" href="#">
        <Image height={40} width={40} src="logo.svg" alt="logo" />
        <span className="ml-2 text-xl font-bold">Dark Almanac</span>
      </Link>
      <nav className="ml-auto flex gap-4 sm:gap-6">
        <Link
          className="text-sm font-medium hover:underline underline-offset-4"
          href="#"
        >
          About
        </Link>
        <Link
          className="text-sm font-medium hover:underline underline-offset-4"
          href="#"
        >
          Articles
        </Link>
        <Link
          className="text-sm font-medium hover:underline underline-offset-4"
          href="/login"
        >
          Login
        </Link>
      </nav>
    </>
  );
}

export default function Component() {
  return (
    <div className="dark flex flex-col min-h-screen bg-gray-900 text-white">
      <header className="px-4 lg:px-6 h-14 flex items-center">
        <Suspense fallback={<MainMenuSkeleton />}>
          <MainMenu />
        </Suspense>
      </header>

      <Suspense fallback={<LoadingComponent />}>
        <main className="flex flex-1 bg-gray-800 h-full">
          <div className="flex flex-1 bg-gray-800 h-full">
            <SimulatorComponent />
          </div>
        </main>
      </Suspense>
      <footer className="flex flex-col gap-2 sm:flex-row py-6 w-full shrink-0 items-center px-4 md:px-6 border-t border-gray-800">
        <p className="text-xs text-gray-500">
          Â© 2024 Game Theory Craft. All rights reserved.
        </p>
        <nav className="sm:ml-auto flex gap-4 sm:gap-6">
          <Link className="text-xs hover:underline underline-offset-4" href="#">
            About Us
          </Link>
          <Link className="text-xs hover:underline underline-offset-4" href="#">
            Contact
          </Link>
          <Link className="text-xs hover:underline underline-offset-4" href="#">
            Privacy Policy
          </Link>
        </nav>
      </footer>
    </div>
  );
}

type ItemRarity =
  | "none"
  | "junk"
  | "common"
  | "uncommon"
  | "rare"
  | "epic"
  | "legendary"
  | "unique";

type PositionCoords = "top" | "bottom" | "left" | "right" | "w" | "h";
type TailwindPositionCoords = `${PositionCoords}-[${string}px]`;

type EquipmentSlotProps = {
  rarity: ItemRarity;
  absolute?: boolean;
  absolutePosition?: TailwindPositionCoords[];
  children?: React.ReactElement | React.ReactElement[];
};

function getColorByRarity(rarity: ItemRarity) {
  if (rarity === "common") return "shadow-neutral-50";

  if (rarity === "uncommon") return "shadow-lime-500";
  if (rarity === "rare") return "shadow-blue-700";
  if (rarity === "epic") return "shadow-violet-900";
  if (rarity === "legendary") return "shadow-amber-600";
  if (rarity === "unique") return "shadow-yellow-200";

  return "";
}

const EquipmentSlot = (props: EquipmentSlotProps) => {
  let cssClassNames = `${props.absolute ? "absolute " : "relative"}${
    props.rarity !== "junk"
      ? " shadow-[0_0px_3px_1px_rgb(0,0,0)] " + getColorByRarity(props.rarity)
      : ""
  }`;

  cssClassNames +=
    " flex bg-zinc-700 border-2 border-stone-900 " +
    props.absolutePosition?.join(" ");

  return <div className={cssClassNames}>{props.children}</div>;
};

const EquipmentDisplay = () => {
  return (
    <div className="flex flex-1 h-full w-full flex-col min-w-[250px] justify-center flex-wrap content-center gap-2">
      <EquipmentSlot
        rarity="uncommon"
        absolutePosition={["w-[80px]", "h-[80px]"]}
      >
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={[
            "top-[-40px]",
            "right-[5px]",
            "w-[30px]",
            "h-[30px]",
          ]}
        />
        <EquipmentSlot
          absolute
          rarity="epic"
          absolutePosition={[
            "top-[-30px]",
            "right-[-100px]",
            "w-[80px]",
            "h-[140px]",
          ]}
        />

        <EquipmentSlot
          absolute
          rarity="unique"
          absolutePosition={[
            "top-[-30px]",
            "left-[-100px]",
            "w-[80px]",
            "h-[140px]",
          ]}
        />
      </EquipmentSlot>

      <EquipmentSlot
        rarity="uncommon"
        absolutePosition={["w-[80px]", "h-[140px]"]}
      >
        <EquipmentSlot
          absolute
          rarity="legendary"
          absolutePosition={[
            "bottom-[10px]",
            "right-[-90px]",
            "w-[80px]",
            "h-[80px]",
          ]}
        />
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={[
            "bottom-[10px]",
            "left-[-90px]",
            "w-[80px]",
            "h-[80px]",
          ]}
        />
      </EquipmentSlot>
      <EquipmentSlot
        rarity="uncommon"
        absolutePosition={["w-[80px]", "h-[140px]"]}
      >
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={["left-[-40px]", "w-[30px]", "h-[30px]"]}
        />
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={["right-[-40px]", "w-[30px]", "h-[30px]"]}
        />
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={[
            "bottom-[0px]",
            "right-[-90px]",
            "w-[80px]",
            "h-[80px]",
          ]}
        />
      </EquipmentSlot>
    </div>
  );
};

/*
// This could be useState, useOptimistic, or other state
//Prevent unload aka before a user leaves
let pending = false;

useEffect(() => {
  function beforeUnload(e: BeforeUnloadEvent) {
    if (!pending) return;
    e.preventDefault();
  }

  window.addEventListener('beforeunload', beforeUnload);

  return () => {
    window.removeEventListener('beforeunload', beforeUnload);
  };
}, [pending])
*/
