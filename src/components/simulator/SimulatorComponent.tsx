"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/o8c38ioXUuz
 */

//Background: #1F2937
// Main: #008087
// Secondary: #8BD77E
// Accent: #25AE8D
// Alert: #F9F871
import {
  useAttributeValues,
  DisplayStats,
  StatEditor,
} from "@Component/StatEditor";

export default function SimulatorComponent(props: { text?: string }) {
  const attributes = useAttributeValues();

  return (
    <div className="flex flex-1 p-4 w-full justify-between flex-col items-center lg:justify-content lg:items-start lg:flex-row">
      <div className="flex flex-col lg:max-w-1/3 m-2">
        <b>Class Selector/Perks</b>
        <div className="flex h-1/2 w-full items-center m-2">
          <div className="flex bg-blue-800 h-16 w-16 justify-center align-middle p-2"></div>
          <h2 className="m-2">Rogue</h2>
        </div>
        <div className="flex flex-wrap h-1/3 w-full mt-4 mb-8">
          <div className="flex h-1/2 w-1/2 justify-center items-center mt-2">
            <div className="flex bg-green-800 h-24 w-24 justify-center align-middle"></div>
          </div>
          <div className="flex h-1/2 w-1/2 justify-center items-center mt-2">
            <div className="flex bg-green-800 h-24 w-24 justify-center align-middle"></div>
          </div>
          <div className="flex h-1/2 w-1/2 justify-center items-center mt-2">
            <div className="flex bg-green-800 h-24 w-24 justify-center align-middle"></div>
          </div>
          <div className="flex h-1/2 w-1/2 justify-center items-center mt-2">
            <div className="flex bg-green-800 h-24 w-24 justify-center align-middle"></div>
          </div>
        </div>
        <div className="flex">
          <StatEditor attributes={attributes} />
        </div>
      </div>
      <div className="flex flex-1 h-full w-full min-w-[260px] lg:max-w-1/3 lg:w-1/3 m-2">
        <EquipmentDisplay />
      </div>
      <div className="w-full lg:max-w-1/3 lg:w-1/3 m-2">
        <div className="flex-1 grow">
          <span className="p-1 bg-green-800">Details</span>
          <span className="p-1 bg-orange-200">Physical Damage</span>
          <span className="p-1 bg-blue-300">Magical Damage</span>
        </div>

        <div className="flex-1">
          <DisplayStats attributes={attributes} />
        </div>
      </div>
    </div>
  );
}

/**
 * v0 by Vercel.
 * @see https://v0.dev/t/ydgoSU2IfFd
 */
//import { Button } from "@/components/ui/button"
import React from "react";

type ItemRarity =
  | "none"
  | "junk"
  | "common"
  | "uncommon"
  | "rare"
  | "epic"
  | "legendary"
  | "unique";

type PositionCoords = "top" | "bottom" | "left" | "right" | "w" | "h";
type TailwindPositionCoords = `${PositionCoords}-[${string}px]`;

type EquipmentSlotProps = {
  rarity: ItemRarity;
  absolute?: boolean;
  absolutePosition?: TailwindPositionCoords[];
  children?: React.ReactElement | React.ReactElement[];
};

function getColorByRarity(rarity: ItemRarity) {
  if (rarity === "common") return "shadow-neutral-50";

  if (rarity === "uncommon") return "shadow-lime-500";
  if (rarity === "rare") return "shadow-blue-700";
  if (rarity === "epic") return "shadow-violet-900";
  if (rarity === "legendary") return "shadow-amber-600";
  if (rarity === "unique") return "shadow-yellow-200";

  return "";
}

const EquipmentSlot = (props: EquipmentSlotProps) => {
  let cssClassNames = `${props.absolute ? "absolute " : "relative"}${
    props.rarity !== "junk"
      ? " shadow-[0_0px_3px_1px_rgb(0,0,0)] " + getColorByRarity(props.rarity)
      : ""
  }`;

  cssClassNames +=
    " flex bg-zinc-700 border-2 border-stone-900 " +
    props.absolutePosition?.join(" ");

  return <div className={cssClassNames}>{props.children}</div>;
};

const EquipmentDisplay = () => {
  return (
    <div className="flex flex-1 h-full w-full flex-col min-w-[250px] justify-center flex-wrap content-center gap-2">
      <EquipmentSlot
        rarity="uncommon"
        absolutePosition={["w-[80px]", "h-[80px]"]}
      >
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={[
            "top-[-40px]",
            "right-[5px]",
            "w-[30px]",
            "h-[30px]",
          ]}
        />
        <EquipmentSlot
          absolute
          rarity="epic"
          absolutePosition={[
            "top-[-30px]",
            "right-[-100px]",
            "w-[80px]",
            "h-[140px]",
          ]}
        />

        <EquipmentSlot
          absolute
          rarity="unique"
          absolutePosition={[
            "top-[-30px]",
            "left-[-100px]",
            "w-[80px]",
            "h-[140px]",
          ]}
        />
      </EquipmentSlot>

      <EquipmentSlot
        rarity="uncommon"
        absolutePosition={["w-[80px]", "h-[140px]"]}
      >
        <EquipmentSlot
          absolute
          rarity="legendary"
          absolutePosition={[
            "bottom-[10px]",
            "right-[-90px]",
            "w-[80px]",
            "h-[80px]",
          ]}
        />
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={[
            "bottom-[10px]",
            "left-[-90px]",
            "w-[80px]",
            "h-[80px]",
          ]}
        />
      </EquipmentSlot>
      <EquipmentSlot
        rarity="uncommon"
        absolutePosition={["w-[80px]", "h-[140px]"]}
      >
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={["left-[-40px]", "w-[30px]", "h-[30px]"]}
        />
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={["right-[-40px]", "w-[30px]", "h-[30px]"]}
        />
        <EquipmentSlot
          absolute
          rarity="uncommon"
          absolutePosition={[
            "bottom-[0px]",
            "right-[-90px]",
            "w-[80px]",
            "h-[80px]",
          ]}
        />
      </EquipmentSlot>
    </div>
  );
};

/*
// This could be useState, useOptimistic, or other state
//Prevent unload aka before a user leaves
let pending = false;

useEffect(() => {
  function beforeUnload(e: BeforeUnloadEvent) {
    if (!pending) return;
    e.preventDefault();
  }

  window.addEventListener('beforeunload', beforeUnload);

  return () => {
    window.removeEventListener('beforeunload', beforeUnload);
  };
}, [pending])
*/
